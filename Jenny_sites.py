# generate input files for CENTURY simulations at Jenny's sites
# then back-calculate management regime and replicate caging

import os
import shutil
from tempfile import mkstemp
import pandas
import back_calculate_management as backcalc

def split_hist_sch():
    def make_hist(source_file, hist_file):
        flag = ', exclosure'
        fh, abs_path = mkstemp()
        os.close(fh)
        with open(abs_path, 'wb') as hist:
            with open(source_file, 'rb') as source:
                line = source.next()
                while flag not in line:
                    if '2014          Last year' in line:
                        newline = '1997          Last year\r\n'
                    else:
                        newline = line
                    hist.write(newline)
                    line = source.next()
        shutil.copyfile(abs_path, hist_file)
        os.remove(abs_path)
    
    def make_extend(source_file, extend_file, weather_file):
        flag = '2             Block # empirical weather'
        fh, abs_path = mkstemp()
        os.close(fh)
        with open(abs_path, 'wb') as extend:
            extend.write('2010          Starting year\r\n')
            extend.write('2014          Last year\r\n')
            with open(source_file, 'rb') as source:
                next(source)
                next(source)
                line = source.next()
                while 'Year Month Option' not in line:
                    extend.write(line)
                    line = source.next()
                while ', exclosure' not in line:
                    line = source.next()
                newline = '1             Block # empirical weather, exclosure\r\n'
                extend.write(newline)
                line = source.next()
                while 'Weather choice' not in line:
                    extend.write(line)
                    line = source.next()
                newline = 'F             Weather choice\r\n'
                extend.write(newline)
                newline = '{}\r\n'.format(weather_file)
                extend.write(newline)
                line = source.next()
                while '-999 -999' not in line:
                    extend.write(line)
                    line = source.next()
                extend.write(line)
        shutil.copyfile(abs_path, extend_file)
        os.remove(abs_path)
    
    site_csv = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\Data\Kenya\From_Jenny\jenny_site_summary_open.csv"
    input_dir = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\CENTURY4.6\Kenya\input\Jenny_sites"
    site_df = pandas.read_csv(site_csv)
    for row in xrange(len(site_df)):
        site_name = site_df.iloc[row].site
        weather_stn = '{}.wth'.format(site_df.iloc[row].closest_weather)
        orig_sch = os.path.join(input_dir, '%s.sch' % site_name)
        orig_sch_copy = os.path.join(input_dir, '%s_orig.sch' % site_name)
        shutil.copyfile(orig_sch, orig_sch_copy)
        hist_file = os.path.join(input_dir, '%s_hist.sch' % site_name)
        make_hist(orig_sch_copy, hist_file)
        make_extend(orig_sch_copy, orig_sch, weather_stn)
    
def PDM_to_g_m2(PDM):
    """Convert PDM measurement to biomass (grams per square m) following
    Jenny's recommended regression for OPC."""
    
    kg_ha = 332.35 * float(PDM) + 15.857
    gm2 = kg_ha / 10
    return gm2
  
def edit_site_file(template, inputs_dict, save_as):
    fh, abs_path = mkstemp()
    os.close(fh)
    with open(abs_path, 'wb') as newfile:
        first_line = '%s (generated by script)\r\n' % inputs_dict['site_name']
        newfile.write(first_line)
        with open(template, 'rb') as old_file:
            next(old_file)
            for line in old_file:
                if '  \'SITLAT' in line:
                    item = '{:0.12f}'.format(inputs_dict['latitude'])[:7]
                    newline = '%s           \'SITLAT\'\r\n' % item
                elif '  \'SITLNG' in line:
                    item = '{:0.12f}'.format(inputs_dict['longitude'])[:7]
                    newline = '%s           \'SITLNG\'\r\n' % item
                elif '  \'SAND' in line:
                    item = '{:0.12f}'.format(inputs_dict['sand'])[:7]
                    newline = '%s           \'SAND\'\r\n' % item
                elif '  \'SILT' in line:
                    item = '{:0.12f}'.format(inputs_dict['silt'])[:7]
                    newline = '%s           \'SILT\'\r\n' % item
                elif '  \'CLAY' in line:
                    item = '{:0.12f}'.format(inputs_dict['clay'])[:7]
                    newline = '%s           \'CLAY\'\r\n' % item
                elif '  \'BULKD' in line:
                    item = '{:0.12f}'.format(inputs_dict['bldens'])[:7]
                    newline = '%s           \'BULKD\'\r\n' % item
                elif '  \'PH' in line:
                    item = '{:0.12f}'.format(inputs_dict['ph'])[:7]
                    newline = '%s           \'PH\'\r\n' % item
                else:
                    newline = line
                newfile.write(newline)
    shutil.copyfile(abs_path, save_as)
    os.remove(abs_path)
    # generate weather statistics (manually :( )

def edit_sch_file(template, site_name, weather_file, save_as):
    fh, abs_path = mkstemp()
    os.close(fh)
    with open(abs_path, 'wb') as newfile:
        with open(template, 'rb') as old_file:
            for line in old_file:
                if '  Site file name' in line:
                    item = '{:14}'.format('{}.100'.format(site_name))
                    newline = '{}Site file name\r\n'.format(item)
                elif '.wth' in line:
                    newline = '{}\r\n'.format(weather_file)
                else:
                    newline = line
                newfile.write(newline)
    shutil.copyfile(abs_path, save_as)
    os.remove(abs_path)
  
def generate_inputs():
    date_dict = {2012: 2012.50, 2013: 2013.50, 2014: 2014.08}
    site_csv = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\Data\Kenya\From_Jenny\jenny_site_summary_open.csv"
    input_dir = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\CENTURY4.6\Kenya\input\Jenny_sites"
    template_site = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\CENTURY4.6\Kenya\input\M05.100"
    template_schedule = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\CENTURY4.6\Kenya\input\M05.sch"
    
    site_list = []
    site_df = pandas.read_csv(site_csv)
    for row in xrange(len(site_df)):
        inputs_dict = {}
        inputs_dict['site_name'] = site_df.iloc[row].site
        inputs_dict['latitude'] = site_df.iloc[row].POINT_Y
        inputs_dict['longitude'] = site_df.iloc[row].POINT_X
        inputs_dict['sand'] = site_df.iloc[row].geonode_sn
        inputs_dict['silt'] = site_df.iloc[row].geonode_sl
        inputs_dict['clay'] = site_df.iloc[row].geonode_cl
        inputs_dict['bldens'] = site_df.iloc[row].geonode_bl
        inputs_dict['ph'] = site_df.iloc[row].geonode_ph
        
        site_filename = os.path.join(input_dir, '%s.100' %
                                     inputs_dict['site_name'])
        # edit_site_file(template_site, inputs_dict, site_filename)
        weather_stn = '{}.wth'.format(site_df.iloc[row].closest_weather)
        sch_filename = os.path.join(input_dir, '%s.sch' % 
                                    inputs_dict['site_name'])
        # edit_sch_file(template_schedule, inputs_dict['site_name'], weather_stn,
                      # sch_filename)
        
        year = site_df.iloc[row].year
        empirical_date = date_dict[year]
        empirical_biomass = PDM_to_g_m2(site_df.iloc[row].week0cage)
        
        site_list.append({'name': inputs_dict['site_name'],
                          'biomass': empirical_biomass,
                          'date': empirical_date})
    return site_list    
    
def calc_management():
    input_dir = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\CENTURY4.6\Kenya\input\Jenny_sites"
    n_years = 2  # how many years to potentially manipulate?
    century_dir = r'C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\CENTURY4.6\Century46_PC_Jan-2014'
    out_dir = r"C:\Users\Ginger\Dropbox\NatCap_backup\Forage_model\Data\Kenya\From_Jenny\Comparisons_with_CENTURY\back_calc_mgmt_9.13.16"  # where to put results of this routine
    vary = 'both' # 'schedule', 'intensity', 'both'
    live_or_total = 'total'  # 'live' (live biomass) or 'total' (live + standing dead biomass)
    threshold = 15.0  # must match biomass within this many g per sq m
    max_iterations = 3  # number of times to try
    fix_file = 'drytrpfi.100'

    site_list = generate_inputs()
    for site in site_list:
        out_dir_site = os.path.join(out_dir, site['name'])
        if not os.path.exists(out_dir_site):
            os.makedirs(out_dir_site) 
        backcalc.back_calculate_management(site, input_dir, century_dir,
                                           out_dir_site, fix_file, n_years,
                                           vary, live_or_total, threshold,
                                           max_iterations)
                                  
if __name__ == "__main__":
    split_hist_sch()